Ref : https://www.jenkins.io/doc/book/installing/linux/#red-hat-centos

#yum -y update
#sudo yum install java-11-openjdk
#sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
#sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
#sudo yum upgrade

#sudo yum install jenkins
#sudo systemctl daemon-reload

#sudo systemctl enable jenkins
#sudo systemctl start jenkins
#sudo systemctl status jenkins
#sudo cat /var/lib/jenkins/secrets/initialAdminPassword

#find /usr/lib/jvm/java-11.0* | head -n 3
#vi .bash_profile 
 JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.amzn2.0.3.x86_64
 PATH=$JAVA_HOME/bin:$PATH
#echo $JAVA_HOME
 /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.amzn2.0.3.x86_64
#source ~/.bash_profile

------------------------- Build Trigger's ---------------------------------------

1. Build Periodically : cron job / 5 astrics 
2. Poll scm : * * * * * 
3. Build after other projects are Build
4. Trigger build remotely
5. Manual 
6. github hook trigger for git scm polling. 

------------------------- Jenkinsfile - Pipeline as a code-----------------------------------
Ex:
pipeline {
    agent any
    stages {
        stage('Cloning the Repo') {
            steps {
                echo "Cloning the repo.."
            }
        }
    }
}

 1. Scripted & Declarative - Both uses groovy , Here 1st uses syntax
 2. Declarative: Starts with pipeline 

Required Arrtibutes:
1) pipeline
2) agent any - where to execute
3) stages - need to define different different stage
4) stage - Whole work happens 'checking out the code/clone/build/test/deploy'
5) steps - where scripts written

6) "post" -
 - Executes some logic after all 'stages' completed
 - conditions/types: "always / success / failure" etc.

7) Define Conditionals for each stage: 
 - Only want to run the "build / test" in Dev Branch but not in other branch. 
 - So when we can define ("when" with "expression"), Step i.e hello which can execute if the branch is 'DEV'
 - Note: Using env variable for the branch i.e env.BRANCH_NAME / BRANCH.NAME , CODE_CHANGES

8)Parameters: 
 - Apply to all the branches 
 - External configuration that you want to your build 
 - we want to be select which version to be deployed so we define by using paramters.
 - Various Types of Parameters: (string , text, booleanParam, choice, password) etc..
 - If you want to genereate the parameters script then choose ,
 - pipeline syntax->properties->this project is parameterised

9)Parallel Build: 
 - In build if we have many steps in a single pipeline it will take more time to complete the build.
 - for this we run the build in parallel inside the declarative pipeline.
 - Blue Ocean Plugin: We can see the build visually .

About Project: 
Continous Integration stages worked:
1. Code checkout
2. Code Build(mvnInstall)
 - mvnInstall refer to "pipeline-libraries under vars folder i.e. mvnInstall.groovy"

3. Code deploy(mvnDeploy), pushing generated artifact to Nexus
 -  mvnDeploy refer to "pipeline-libraries under vars folder i.e. mvnDeploy.groovy"
 - Need to add the plugin "maven-deploy-plugin" under <plugins> section in pom.xml file.
 - Need to give the nexus url under <pluginRepositories>, <repositories> & <distributionManagement>
   - <pluginRepositories> releases
   - <repositories> id- snapshots , url, 
   - <distributionManagement> id- releases , url & 
     - <snapshotRepository> id & url 
   - Add nexus credentials in setting.xml (jenkins->Managed jenkins-> Managed file-> config file mgmt)

4. Sonarqube analysis
5. NexusIQ
6. Docker Building the code and creating the image and pushing to docker repo. 
7. 

Continous deliver & Continous Deployment:

-------------How to add / provide "Admin / any other access" to user's:--------------------------------

- We need to go to: Manage jenkins--> security-->configure global security-->
  - Matrix-based security
  - project-based matrix authorization strategy 
  - Role-based strategy
------------------------------------------------------------------------------
JNLP Port in jenkins ?
