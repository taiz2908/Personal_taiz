------------------------------: K8S IMP CMDS: -------------------------------------------------
# kubectl api-resources | more -->how many resources we can manage/create.
 - false: can't be run in ns.
 - true: can be deployed within the namespace.
# kubectl api-resources | grep -i rs/sv/deployment

# kubectl api-versions
# kubectl explain pod
# kubectl explain pod.metadata | more
# kubectl explain pod.spec | grep -i require

# kubectl get all | nodes | po | deployment | sv | rs | ns | pv | pvc , to get the status
# kubectl get all -A :means all namespaces.
# kubectl get all -n <namespace_name>

# kubectl get rs,pods -o wide , -o:output format, can see the details of  node / IP/ age / status etc..
# kubectl delete pod <podname>, to delete the pod 
# kubectl get pod --show-labels,
# kubectl exec -it <podname> -- bash , to enter within a specific pod
# kubectl exec -it <podname> -c <containername> -- sh/bash , When we have multiple container in a pod. 
# kubectl get pods -l name=myapp, we can see the pods falls under the lables. "filter the pods"
# kubectl port-forward <podname> 8080:80, localport to the container port. localhost:8080

------------------ :dry-run=client: ---------------------------------------
IMP Command: ---> complete yml file. (--dry-run=client -o yaml > 1.yaml)
# kubectl run <pod_name> nginx --port 80 --dry-run=client -o yaml > 1.yaml
# kubectl apply -f 1.yaml 
curl http://<POD_ip>
 # kubectl create deployment <deployment_name> --image <image_name> --replicas 3 --dry-run=client -o yaml > 1.yaml
 # kubectl create deployment <deployment_name> --name nginx --dry-run=client -o yaml > 2.yaml

--------------: Logs & debugging: ------------------
# kubectl describe pod <pod_name> , details/informations of the single pod.
# kubectl logs <podname> -f , '-f' to watch / monitoring the logs, to see the pod logs
# kubectl logs -l name=myLabel, pod logs,with name=myLabel
# kubectl logs <pod_name> -c <containername>, 
# docker inspect <image_name>

# kubectl describe pod <pod_namae> -o wide | more -->lables, status,ip, container info, host port numnber etc and "events"
 - from the events we can use for troubleshooting 
-------------------------------------------------

# kubectl cluster-info - 
# kubectl expose deployments - 
# kubectl run nginx --image=nginx - single command to create nginx pod 
# kubectl scale --replicas=6 -f replicas-definition.yml , 1st we edit the definition file and apply the scale-in /scale-out 
# kubectl get deployment <nginx-deployment> -o yaml > results.yaml

---------------Deployment: Stateless Application----------------
 # kubectl create deployment <deployment_name> --image <image_name> --replicas 3 --dry-run=client -o yaml > 1.yaml
 # kubectl create deployment <deployment_name> --name nginx --dry-run=client -o yaml > 2.yaml
 # kubectl describe deployment <deployment_name>
 # kubectl get deploy
 # kubectl get deploy,rs,pod -o wide
 # kubectl scale deployment d1 --replicas=5
 # kubectl set image deploy/d1 <image_name>=nginx:1.41.1

- Status of rollout:
 # kubectl rollout status deployment/myapp-deployment  - to show the status
 # kubectl rollout history deployment/myapp-deployment - to see the revision & history of deployments
 # kubectl rollout undo deployment/d1, i.e rollback to the previous version of deployment, 
  notice somthing change / not working after that we can use this command
 or,
 # kubectl rollout undo deployment/d1 --to-revision=2

  crictl images -->show image, tag, imageid & size. 

----------------------------- :K8s Services: --------------------------------------------------
# kubectl get svc
# kubectl get svc -0 wide
# kubectl describe svc <name_of_svc> --> we can see endpoints.
# kubectl get nodes -o wide
# <node_IP>:<node_port>
# kubectl run abc --image nginx -l <selector>
# kubectl expose --help  ---> we can use in exam
# kubectl expose deploy/pod d1 --port=80 --targetport=80 --type NodePort --name <service_name> --dry-run=client -o yaml

==================================================================================================================
#helm create <chart_name>
#helm lint ./mychart/ --> to check the syntax
  - 1 chart linked, o charts failed.
#helm install --dry-run --debug ./mychart/ --generate-name
#helm install --dry-run <release_name> <chart_name>

#helm -h --> show all comds
#helm list
#helm repo list
#helm repo add <repo_name> <repo_url>
#helm repo remove <repo_name>
#helm search repo jenkins
#helm show --> info about chart
#helm show <values|chart|readme|all> <chart_name>
#helm install <release_name> <chart_name>
#helm install <release_name> <chart_name> --version 0.1.0
#helm status <release_name>
#helm history <release_name>
#helm upgrade <release_name> <chart_name> 
#helm rollback <release_name>
#helm pull <chart_name> - in the form of tar file
#helm pull -untar <chart_name>
