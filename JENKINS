Ref: Jenkinsfile 
https://www.youtube.com/watch?v=aFRjn_4nb-Q&list=PLKaiHc24qCTSnXaus2t4b71ihq9k649XS
https://www.youtube.com/watch?v=7KCS70sCoK0&t=236s - TechwithNana


By default, Jenkins stores all of its data in this directory on the file system
/var/lib/jenkins

root@ip-172-31-92-133 ~]# cd /var/lib/jenkins 

jenkins.model.JenkinsLocationConfiguration.xml      queue.xml.bak
config.xml                                          jenkins.telemetry.Correlator.xml                           secret.key
hudson.model.UpdateCenter.xml                       jobs                                                       secret.key.not-so-secret
hudson.plugins.emailext.ExtendedEmailPublisher.xml  nodeMonitors.xml                                           secrets
hudson.plugins.git.GitTool.xml                      nodes                                                      updates
identity.key.enc                                    org.jenkinsci.plugins.workflow.flow.FlowExecutionList.xml  userContent
jenkins.install.InstallUtil.lastExecVersion         plugins                                                    users
------------------------------------------------------------
Jenkinsfile - Pipeline as a code
 Scripted & Declarative - Both uses grrovy , Here 1st uses syntax
 Declarative: Starts with pipeline 

 Ex:
  pipeline {
    agent any 
    stages {
        stage ('Hello') {
            steps {
                echo 'Hello Worl!'
            }
        }
    }
  }
----------------------------------------------
How to clone a git/gerrit repo using Jenkinsfile:
pipeline {
    agent any
    stages {
        stage ('Clone git repo') {
            steps {
                git branch: 'main', crendentialsId '****', url: '****'
            }
        }
    }
}
----------------------------------------------
Required Arrtibutes:
1) pipeline
2) agent any - where to execute
3) stages - need to define different different stage
4) stage - Whole work happens 'checking out the code/clone/build/test/deploy'
5) steps - where scripts written

6) post - Executes some logic after all 'stages' completed
   conditions/types: always / success / failure /
  post {
    always {
        // will be excuted not matter build failed / succeeded - Notification  
    }
    success {
        // will excute the script only the build succeeded
    }
    failure {
        // will execute the build of the build failed
    }
  }

7) Define Conditionals for each stage: Only want to run the test in Dev Branch build not in other branch 
   So when we can define 'when' expression. Step i.e hello only can execute if the branch is 'DEV'
   Note: Using env variable for the branch i.e env.BRANCH_NAME / BRANCH.NAME , CODE_CHANGES
   
Ex: '==' - EQUALS to, '||' - OR 
stage ('test') {
    when {
        expression {
            BRANCH_NAME == 'DEV' || BRANCH_NAME == 'MASTER' 
        }
    }
    steps {
        echo 'Hello'
    }
  }
Ex: "&&" - AND 
define before pipeline i.e CODE_CHANGES = getGITchanges()
  stage ('Build') {
    when {
        expression {
            BRANCH_NAME == 'DEV' && CODE_CHANGES == true 
        }
    }
    steps {
        echo 'Hello'
    }
  }
------------------------------------------------------------
Environmental Variables: http://localhost:8080/env-var.html/
Ex:
pipeline {
    agent any 
    environment {
        NEW_VERSION = '1.2.0'
    }
    stages {
        stage ('Build') {
            steps {
                echo 'Builing'
                echo "Building version ${NEW_VERSION} "

            }
        }
    }   
}
------------------------------------------------------------
Parameters: 
 Apply to all the branches 
 External configuration that you want to your build 
 we want to be select which version to be deployed so we define by using paramters.
Various Types of Parameters: string , text, booleanParam, choice, password etc..
Ex: 1
pipeline {
    agent any
    parameters {
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.1'], description: '')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }
    stages {
        stage('test') {
            when {
                expression {
                    params.executeTests
                }
            }
            steps {
                echo 'Testing the Application'
            }
        }
        stage ('Deploy') {
            steps {
                echo 'deploying the application'
                echo "deploying version ${params.VERSION}"
            }
        }
    }
}
--------------------------------------------------------------------
Ex: 2, If we should tik it should be print Project A, else Print B
pipeline {
    agent any
    parameters {
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.1'], description: '')
        booleanParam(name: 'executeTests', defaultValue: '', description: '')
    }
    stages {
        stage('test') {
            steps {
                script {
                    if ( params.executeTests == true ) {
                        echo "Test Project A" 
                    } else {
                        echo "Test Project B"
                    }
                }
            }
        }
        stage ('Deploy') {
            steps {
                echo "deploying the ${params.VERSION}"
            }
        }
    }
}
--------------------------------------------------------------------
EX:3, 
pipeline {
    agent any
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }   
    stages {
        stage('Example') {
            steps {
                echo "Hello ${params.PERSON}"

                echo "Biography: ${params.BIOGRAPHY}"

                echo "Toggle: ${params.TOGGLE}"

                echo "Choice: ${params.CHOICE}"

                echo "Password: ${params.PASSWORD}"
            }
        }
    }
}
------------------------
https://www.youtube.com/watch?v=qDVqezp3mOw

    





