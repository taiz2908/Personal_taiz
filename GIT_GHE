Git is a free and open source "distributed version control system" .
Github is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.

-------- Git Stages: ----------
 1) Working area: where we can create files physically and modify. Being a Git user, we work in this work space.
 2) staging area: Git takes a snapshot for every version. It is a buffer zone between workspace and local repository. We canâ€™t see this region because it is virtual.
 3) Local repo: where Git stores all commit locally. It is a hidden directory so that no one can delete it accidentally. Every commit will have unique commit ID.
 4) Central repo

Git Commands:
create a dir & within dir initiate git init
# git init - Initialize an empty dir as a git repo
Git Config:
# git config --global user.name "" - set a Username
# git config --global user.email "" - set an Email
# git clone <repo_url> : Clone (download) a repo that already exist on github, including all files, branches & commits.
# git remote add origin <url> : After using git init cmd link the local repo to an empty guthub repo.
# git remote -v : to whether remote repo configured or not.

# git add . - Git add all untracked files.
# git commit -m "msg" / git commit -am "msg" - commit changes.
# git status - show all untracked files
# git push -u origin master : pushing the code to remote repo.
# git pull <repo_url> : Pull the latest changes from remote/central repo
# git 

# git clone --bare <repo_url>
# cd 
# git push --mirror <repo_url>
-------------------------------------------------------------
Git Stash:
 - Stash is a temporary repository where we can store our content and bring it back whenever we want to continue with our work with that stored content. It removes content inside file from working directory and puts in stashing store and gives clean working directory so that we can start new work freshly. Later on you can bring back that stashed items to working directory and can resume your work on that file. 
 Ex:
  vi demo.txt
  git stash save "msg"
  git stash list
  git stash apply stash@{0}
  git stash clear
  git stash pop stash@{0}
  git add .
  git commit -m "msg"
  git push

Git Ignore: 
- If we have multiple files and we want to ignore some of files during staging area in that situsation we can use git ignore 
# vi .gitignore
 * file.css
 * file.java
# git add .gitignore
# git commit -am "commit msg"

Rename / Delete a file:
# git rm hello.txt - deleting a file
# git mv hello.txt demo.txt - renaming a file

Branching Strategy:
# git branch / git branch -a, to see the branch details
# git branch 'Prod_1.0' / 'branch_name' - Create a new branch
# git checkout 'branch_name' - switch to new branch with branch name
# git push origin 'branch_name' - Push from within the branch
# git merge 'dev' - merge 'dev' branch to master/main , After merge use push cmd to send to central repo.
# git branch -d 'branch_name' - Local Repo
# git branch -D 'branch_name' - Local repo forcefully

Delete & renaming the existing branch:
# git branch -m <old_name> <new_name> - Renaming the branch in local
# git push origin -u <new_name> - Pushing the new branch to remote.
# git push origin --delete 'branch_name' - Delete from remote repo.

Log / Commit Id's: 40 alpha numeric char
# git log - to show all commit ID i.e author ,commmit, date
# git log --oneline
# git log -P - shows code changes
# git reflog - show all commit id even deleted
# git diff - show the difference / compaire of working dir with staging area
# git difftool <branch_1> <branch_2>

# git 
-------------------------- GIT TAG ----------------------------------------
- Marking a lable to particular commit / lable. 
- pointer -> that refer to git history.
- Used mostly in the release of the projects.

git checkout <branch_name>
git tag v1.0 , creating a tag (light-weight tag)
git tag
git tag -a v1.1 -m "tag for release1.1" , (annonated tag)
git show v1.1
git push origin v1.1
git push --tags
git tag -d v1.1 , delete the tag from local
git push origin -d v1.0 , delete the tag from remote origin

--------------------------How to Create Pull Request's ---------------------------
1) If developer's wants to do any changes in the code he can't directly do it in the master branch, 
   has to create a new branch, push the code to newly created branch , 
   So need to raise the pull request, need to review by us/ sr members and merge it to master 
2) Developers needs to follow some perticular templates when raising the pull requests.
Ex:
That is Application Id/ Task ID etc

-------------------------- Git Branching Strategy -------------------
Currently in our project basically  we have 
1) Master Branch: It containes production code which is stable [ Active Development ]
   - Always Up to date. 
   
2) Development Branch: 
   - Has Pre-Production code . (when we're assigned with new feature we can create a new feature branch frm dev branch, we can create a pull request and merged it with dev branch,and perticular feature branch will be deleted )

3) Feature Branch: 

4) Release Branch: [ Delivering code to the customer ]
   - to support preparation of new prod release. 

5) Hot Fix Branch:  [Qucik changes and deliver to customer]
   - to patch prod releases.
   - It should go both in master as well as release branch.




