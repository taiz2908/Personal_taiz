Git is a free and open source "distributed version control system" .
Github is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.

Git Stages:
 Working area
 stating area
 Local repo 
 Central repo

Git Commands:
create a dir & within dir initiate git init
# git init - Initialize an empty dir as a git repo
Git Config:
# git config --global user.name "" - set a Username
# git config --global user.email "" - set an Email
# git clone <repo_url> : Clone (download) a repo that already exist on github, including all files, branches & commits.
# git remote add origin <url> : After using git init cmd link the local repo to an empty guthub repo.
# git remote -v : to whether remote repo configured or not.

# git add . - Git add all untracked files.
# git commit -m "msg" / git commit -am "msg" - commit changes.
# git status - show all untracked files
# git push -u origin master : pushing the code to remote repo.
# git pull <repo_url> : Pull the latest changes from remote/central repo
# git 

# git clone --bare <repo_url>
# cd 
# git push --mirror <repo_url>
-------------------------------------------------------------
Git Stash:


Git Ignore: 
If we have multiple files and we want to ignore some of files during staging area in that situsation we can use git ignore 
# vi .gitignore
 * file.css
 * file.java
# git add .gitignore
# git commit -am "commit msg"



Rename / Delete a file:
# git rm hello.txt - deleting a file
# git mv hello.txt demo.txt - renaming a file

Branching Strategy:
# git branch - to see the branch details
# git branch 'Prod_1.0' / 'branch_name' - Create a new branch
# git checkout 'branch_name' - switch to new branch with branch name
# git push origin 'branch_name' - Push from within the branch
# git merge 'dev' - merge 'dev' branch to master/main , After merge use push cmd to send to central repo.
# git branch -d 'branch_name' - Local Repo
# git branch -D 'branch_name' - Local repo forcefully
# git push origin --delete 'branch_name' - Delete from central repo

Log / Commit Id's: 40 alpha numeric char
# git log - to show all commit ID i.e author ,commmit, date
# git log --oneline
# git log -P - shows code changes
# git reflog - show all commit id even deleted
# git diff - show the difference/ compaire of working dir with staging area
#

# git 

-------------------------- Pull Request's ---------------------------
1) If developer's wants to do any changes in the code he can't directly do it in the master branch, 
   has to create a new branch, push the code to newly created branch , 
   So need to raise the pull request, need to review by us/ sr members and merge it to master 
2) Developers needs to follow some perticular templates when raising the pull requests.
Ex:
That is Application Id/ Task ID etc

-------------------------- Git Branching Strategy -------------------
Currently in our project basically  we have 
1) Master Branch: It containes production code which is stable
2) Development Branch: Has Pre-Production code . (when we're assigned with new feature we can create a new feature branch frm dev branch, we can create a pull request and merged it with dev branch,and perticular feature branch will be deleted )
3) Feature Branch: 
4) Release Branch: to support preparation of new prod release. 
5) Hot Fix Branch: to patch prod releases. 




