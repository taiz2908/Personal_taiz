Ref:
 - https://www.youtube.com/watch?v=nnIFkEOzNp4 - by Abhishek Veeramalla
 - https://www.youtube.com/watch?v=AYAh6YDXuho - By TechWorld with Nana
 - https://www.youtube.com/watch?v=esISkPlnxL0 - KodeKloud
 - https://www.youtube.com/watch?v=nWfwlOqs2p4 - AWS ECS | Elastic Container Service | AWS Cloud | Deploying Containers on ECS Fargate


============: ECS (Elastic Container Service) :=======================================
 - AWS managed container orchestration platform / AWS proprietary service. 
 - Manages the whole life cycle of a container (start,reschdule,stop,kill etc)
 - It also a container orchestration service provided by aws. 
 - Works pay as you go model. 

PaS: Service to run containers

ECS :
 - Mostly we can use Fargate (Serverless) & EC2.   
 - Cost effective. 
 - Easy to create the cluster. 
 - Only we need to develope the application & create the containers(writing dockerfile for the application) 

Architecture:   
- ECS like --> Control Plane
- Fargate 

Drawbacks:
 - dont have features like k8s like Custom Resource defination (CRD). 
 - k8s is open source and lot of features and open source community 
 - ISTIO , Argo CD etc mostly support k8s
 - In k8s needs to configure Ingress controller. 
 - Advance security options. 

Components of ECS Cluster : 
 - Clusters
 - Services: Just like website,running around the clock ,containers need to deploy as service 
   - A service ensures that a certain numbers of Tasks are running at all times.
   - Restarts containers that have exited /Crashed. 
 - Task Defination 
   - How does the container looks like / Blueprint for our containers.
   - CPU, Memory needs to be define
   - Images, Ports, Volume etc
 - Task 
   - Instance of the task definition.
   - Running container's.

 - Namespaces 

 - Tasks: running a patch workload, ex: logs need to upload on the top up s3 bucket. 

Cluster Overview:
 - Need to create the cluster 
 - Vpc, subnet, Namespace 
 - Infrastructure 
  - AWS Fargate (managed automatically ) [no need to provision & managing servers, On demand, only infra resources
  need to run the container, pay only what you use, easily scales up ]
  - EC2
 - Cloudwatch Monitoring (default)
 - Create it. 

----
FIRST OF ALL : We need to login & build the dockerfile 
 - Login: aws ecr get-login-password --region <region_name> | --username AWS --password-stdin <registoy_name>
 - Building: docker build -t <registory_name i.e ecr>/<repository>:latest . 
 - Pushing to ECR: docker push <registory_name i.e ecr>/<repository>:latest

Now go to ECS:
 - Task definition -> Create Task Definition
 - Choose OS , Task size, 
 - Task Role (IAM role) - Allows Container in the task to make API requests to AWS Services.
 - Task Execution role - Used for the container agent to make AWS API requests on your behalf. 
  - Ex: Integrated with cloudwatch. 

Container -1 :
 - Name
 - Image url
 - Essential containers 
 Port Mapping:
 - container port
 - protocol
 - Port name
 - App Protocol
 Resource Allocation limits:
 - 
----

===============================



EXPOSE 9090

# Use an official Prometheus base image
FROM prom/prometheus:latest

# Copy your Prometheus configuration file into the container
COPY /etc/prometheus/prometheus.yml /etc/prometheus/prometheus.yml

# Expose Prometheus web UI and API port
EXPOSE 9090

# Start Prometheus with the specified configuration
CMD ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/etc/prometheus/console_libraries", "--web.console.templates=/etc/prometheus/consoles"]



docker build -t my-prometheus .
docker run -p 9090:9090 my-prometheus



