Ref: Jenkinsfile
 - https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
 - https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/
 - https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials

VIDEO:
1. https://www.youtube.com/watch?v=aFRjn_4nb-Q&list=PLKaiHc24qCTSnXaus2t4b71ihq9k649XS

2. https://www.youtube.com/watch?v=7KCS70sCoK0&t=236s - TechwithNana

3. How to pass parameters to downstream jobs: https://www.youtube.com/watch?v=qDVqezp3mOw

4. Parameter Jobs: https://devopscube.com/declarative-pipeline-parameters/, 
   https://www.youtube.com/watch?v=u2GZERqMb0I&t=26s

5. Jenkins Tutorial,How to Deploy a Test Server with Docker + Linux : Freecodecamp
   https://www.youtube.com/watch?v=f4idgaq2VqA&t=22s

6. Jenkisfile: deploy war file into tomcat. https://www.youtube.com/watch?v=MBn3fx9OfRk

7. Jenkinsfile Tutorial : https://www.youtube.com/channel/UCYo5aJ_PChQ_UzkaNsj5ZFg/videos

8. Learn Jenkins! Complete Jenkins Course, Zero to Hero: https://www.youtube.com/watch?v=6YZvp2GwT0A&t=2909 

9. https://www.youtube.com/watch?v=zZfhAXfBvVA : Jenkins ZERO to HERO | 3 Projects Live |Docker Agent |Interview Questions

10. https://www.youtube.com/watch?v=ZXaorni-icg How to Use Kubernetes Pods As Jenkins Agents
---------------------------------------------------------------------------------------

Tasks:
1. Multi-branch pipeline: https://www.youtube.com/watch?v=B_2FXWI6CWg
2. Upstream & downstream jobs
3. Parameterised Jobs
4. 
---
By default, Jenkins stores all of its data in this directory on the file system
/var/lib/jenkins
---
root@ip-172-31-92-133 ~]# cd /var/lib/jenkins 
jenkins.model.JenkinsLocationConfiguration.xml      queue.xml.bak
config.xml                                          jenkins.telemetry.Correlator.xml                           secret.key
hudson.model.UpdateCenter.xml                       jobs                                                       secret.key.not-so-secret
hudson.plugins.emailext.ExtendedEmailPublisher.xml  nodeMonitors.xml                                           secrets
hudson.plugins.git.GitTool.xml                      nodes                                                      updates
identity.key.enc                                    org.jenkinsci.plugins.workflow.flow.FlowExecutionList.xml  userContent
jenkins.install.InstallUtil.lastExecVersion         plugins                                                    users
------------------------------------------------------------
Jenkinsfile - Pipeline as a code
 Scripted & Declarative - Both uses groovy , Here 1st uses syntax
 Declarative: Starts with pipeline 

 Ex:
  pipeline {
    agent any 
    stages {
        stage ('Hello') {
            steps {
                echo 'Hello Worl!'
            }
        }
    }
  }
----------------------------------------------
How to clone a git/gerrit repo using Jenkinsfile:
pipeline {
    agent any
    stages {
        stage ('Clone git repo') {
            steps {
                git branch: 'main', crendentialsId '****', url: '****'
            }
        }
    }
}
----------------------------------------------
Required Arrtibutes:
1) pipeline
2) agent any - where to execute
3) stages - need to define different different stage
4) stage - Whole work happens 'checking out the code/clone/build/test/deploy'
5) steps - where scripts written
6) post - Executes some logic after all 'stages' completed
   Conditions/Types: always / success / failure / cleanup 
  post {
    always {
        // will be excuted not matter build failed / succeeded - Notification  
    }
    success {
        // will excute the script only the build succeeded
    }
    failure {
        // will execute the build of the build failed
    }
    cleanup {
        cleanWs() // Clean the work space after the build
    }
  }

7) Define Conditionals for each stage: Only want to run the test in Dev Branch build not in other branch 
   So when we can define 'when' expression. Step i.e hello only can execute if the branch is 'DEV'
   Note: Using env variable for the branch i.e env.BRANCH_NAME / BRANCH.NAME , CODE_CHANGES
   
Ex: '==' - EQUALS to, '||' - OR 
stage ('test') {
    when {
        expression {
            BRANCH_NAME == 'DEV' || BRANCH_NAME == 'MASTER' 
        }
    }
    steps {
        echo 'Hello'
    }
  }
Ex: "&&" - AND 
define before pipeline i.e CODE_CHANGES = getGITchanges()
  stage ('Build') {
    when {
        expression {
            BRANCH_NAME == 'DEV' && CODE_CHANGES == true 
        }
    }
    steps {
        echo 'Hello'
    }
  }
------------------------------------------------------------
Environmental Variables: http://localhost:8080/env-var.html/
Ex:
pipeline {
    agent any 
    environment {
        NEW_VERSION = '1.2.0'
    }
    stages {
        stage ('Build') {
            steps {
                echo 'Builing'
                echo "Building version ${NEW_VERSION} "
            }
        }
    }   
}
------------------------------------------------------------
Parameters: 
 - Apply to all the branches 
 - External configuration that you want to your build 
 - we want to be select which version to be deployed so we define by using paramters.
Various Types of Parameters:
 - string , text, booleanParam, choice, password etc..
 - If you want to genereate the parameters script then choose ,pipeline syntax->properties->this project is parameterised

Ex: 1
pipeline {
    agent any
    parameters {
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.1'], description: '')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }
    stages {
        stage('test') {
            when {
                expression {
                    params.executeTests
                }
            }
            steps {
                echo 'Testing the Application'
            }
        }
        stage ('Deploy') {
            steps {
                echo 'deploying the application'
                echo "deploying version ${params.VERSION}"
            }
        }
    }
}
--------------------------------------------------------------------
Ex: 2, If we should tik it should be print Project A, else Print B
Parameters + Git clone + Extra Step

pipeline {
    agent any
    parameters {
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.1'], description: '')
        booleanParam(name: 'executeTests', defaultValue: '', description: '')
    }
    stages {
        stage('test') {
            steps {
                script {
                    if ( params.executeTests == true ) {
                        echo "Test Project A" 
                    } else {
                        echo "Test Project B"
                    }
                }
            }
        }
        stage ('Deploy') {
            steps {
                echo "deploying the ${params.VERSION}"
            }
        }
    }
}
--------------------------------------------------------------------
EX:3, 
pipeline {
    agent any
    parameters {
        string(name: 'ARTIFACT', defaultValue: '.war', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['DEV', 'SIT', 'PROD'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }   
    stages {
        stage('Example') {
            steps {
                echo "Hello ${params.ARTIFACT}"

                echo "Biography: ${params.BIOGRAPHY}"

                echo "Toggle: ${params.TOGGLE}"

                echo "Choice: ${params.CHOICE}"

                echo "Password: ${params.PASSWORD}"
            }
        }
    }
}
------------------------------------------------------------------------------------
Parallel Build: 
 - In build if we have many steps in a single pipeline it will take more time to complete the build.
 - For this we run the build in parallel inside the declarative pipeline.
 - Blue Ocean Plugin: We can see the build visually .

pipeline {
    agent any
    parameters {
        booleanParam(name: 'executeTests', defaultValue: '', description: '')
    }
    stages {
        stage('parallel stage') { 
            parallel {
                stage('Running') {
                    steps {
                        echo "Running..."
                    }
                }
                stage('Building') {
                    steps {
                        echo "Building..."
                    }
                }
                stage('Deploying') {
                    steps {
                        echo "Deploying..."
                    }
                }
            }
        }
        stage('Parallel Test') {
            parallel {
                stage('Testing Application') {
                    steps {
                        script {
                            if ( params.executeTests == true ) {
                                echo "Test Project A"
                            } else {
                                echo "Test Project B"
                            }
                        }
                    }   
                }
                stage ('Deploy') {  
                    steps {
                        echo "deploying the Application.."
                    }
                }
            }
        }
    }
}
-----------------------------------------------
pipeline {
    agent any
    parameters {
        booleanParam(name: 'executeTests', defaultValue: '', description: '')
    }
    stages {
        stage('Paramaters') {
                steps {
                    script {
                        if ( params.executeTests == true ) {
                            echo "Test Project A" 
                        } else {
                            echo "Test Project B"
                    }
                }
            }
        }
        stage('parallel stage') { 
            parallel {
                stage('Running') {
                    steps {
                        echo "Running..."
                    }
                }
                stage('Building') {
                    steps {
                        echo "Building..."
                    }
                }
                stage('Deploying') {
                    steps {
                        echo "Deploying..."
                    }
                }
            }
        }
        stage('Parallel Test') {
            parallel {
                stage('Testing Application') {
                    steps {
                        echo "Testing the App.."
                    }   
                }
                stage ('Deploy') {  
                    steps {
                        echo "deploying the App.."
                    }
                }
            }
        }
    }
}

