def file = 'values-sit.yaml'
def newimg = 'web-server'
def newtag = params.IMAGE_TAG
def repo_url = ''

//running in k8s cluster, so mentioned k8s under the agent 
pipeline {
    agent {
        kubernetes {
            workspaceVolume hostPathWorkspaceVolumne("/buildstore/jenkins")
            defaultContainer 'maven'
            yaml '''
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        lable: myproject_slave
    spec:
      securityContest: 
         privileged: true
         runAsuser: 0
      nodeSelector:
        node-role.kubernetes.io/worker: true
      container:
      - name: maven
         image: /maven:3.5.0
         command:
         - cat
         tty: true
      - name: sonar-scanner
         image: latest
         command:
         - cat
         tty: 
      - name: docker
        image: /docker:18.09.4
        command:
         - cat
        tty: true
        volumeMounts:
         - mountPath: /var/run/docker.sock
           name: volume-0
           readOnly: false
        volumes:
         - name: volume-0
           hostPath:
            path: /var/run/docker.sock
            type: Socket

'''

        }
    }

    environment {
        U***N_CRED = 'taiz'
    }

    /* triggers {
        pollSCM('') //Enabling build on push
    } */

    stages {
        stage ('PACKAGE') {
            steps {
                mvnInstall()
            }
        }
        stage ('DEPLOYING TO NEXUS') {
            steps {
                mvnDeploy()
            }
        }
        stage ('SONAR CODE ANALYSIS') {
            steps {
                Sonarcodeanalysis()
            }
        }
        stage ('NEXUSIQ') {
            steps {
                script {
                    nexusIQ ('testproject', "/target/*.war .jar")
                }
            }
        }
        stage ('UNIT TEST') {
            steps{
                mvnTest()
            }
        }

        stage ('DOCKER LOGIN') {
           /* when {
                branch 'main'
            } */

            steps{
                script {
                    container('docker'){
                        withCredentials([
                            usernamePassword(credentialsID:'my_cred', usernameVariable:'my_update', passwordVariables:'my_passwd')
                        ]) {
                            sh """#!/bin/sh
                             docker login -u \$my_update -p \my_passwd $repo_url
                             docker build -t $newimg:$newtag --build-arg SRC=$repo_url --build-arg IMG=$newimg --build-arg TAG=newtag .
                           """  
                        }
                    }
                }
            }
        }
        stage ('BUILDING & PUSHING IMG') {
            /* when {
                branch 'main'
            } */
            
            steps {
                script {
                    container('docker'){
                        withDockerRegistry(credentialsID: 'my_demo_test' , url: 'hub.docker.com') {
                            sh """#!/bin/sh
                            docker tag $newimg:$newtag $repo_url/$newimg:$newtag
                            docker push $repo_url/$newimg:$newtag
                            """
                        }
                    }
                }
            }
        }
        /* "not necessary" stage ('RUNNING CONTAINER') {
            steps {
                scripts{
                    container('docker'){
                        withDockerRegistry(credentialsID: 'my_demo_test' , url: 'hub.docker.com') {

                            sh """#!/bin/sh
                            docker rm -f web-server-container
                            sleep 60
                            docker run -dit -p 8080:8080 --name web-server-1 web-server:"$params.IMAGE_TAG"
                            docker ps
                            sleep 60
                            docker exec web-server-1 curl localhost:8080/
                        """
                        }
                    }
                }
            } 
        } */

        stage ('Helm Upload') {
            steps{
                container('name') {
                    withCredentials([sting(credentialsID: , variable: '')]) {
                        sh """

                        """
                    }
                }
            }
        }

    }
    post{
        cleanup {
            cleanWs()
        }
    }
}

===========================================
1. Application Overview
2. Git use cases
3. Jenkins Job Creation 
4. Maven UNIT TEST
5. Maven Integration TEST
6. Maven Building jar/War files
7. SonarQube Configuration
8. Sonarqube-webhook Configuration 
9. Static code Analysis 
10. QualityGate Status  
11. Nexus Repo Overview
12. Release Repo creation 
13. Snapshot repo creation  & Configuration
14. Error Debugging
15. Multistage DockerFile 
16. Docker Image Build
17. Docker Image Push
18. To be continued...

Ex:
"pipeline-libraries under vars/ folder i.e. mvnInstall.groovy"
1. APPLICATION
    - Springboot app generating .jar
    - /root/.m2/repository/

2. SOURCE CODE
    - GitHub

3. JOB CREATION //Jenkins as CI tool
    - Freestyle
    - Pipeline //
    - Multibranch Pipeline //
    - plugins 
      - multibranch-scan-webhook-trigger //for multibranch pipeline.
      - mailer // send to notification over mail. 
      - Office-365-Connector // for MS Team's,
        - "Incoming Webhook", add to a team->setup a connector.
        - generate a link, copy & paste.
        - Go to jenkins -> create a pipeline job,  Plugin "office 365" should be installed and add webhook.

4. CODE CHECKOUT: GitHub
    - using Jenkinsfile
    - Build triggers used in Jenkins server
      - pollSCM //
      - Build periodically //
      - Build after other projects are Build
      - Trigger build remotely
      - Manual 
      - Github hook trigger for git scm polling.

5. CODE BUILD, //Maven used as build_tool(.war/.jar)
    - mvn clean install
    - plugins 
      - pipeline-Maven
      - maven-plugin (maven integration)

6. UNIT TEST //to apply test cases, developers write the test cases which is being used in pipeline. 
    - mvn test 

7. CODE ANALYSIS: //SonarQube by Static code Analysis(bugs,coverages,lines,)
    - 
    - plugins
      - sonarqube-generic-coverage
      - SonarQube Scanner (sonar)
    - Manage jenkins->configure systems->need to provide url & auth token
      - Auth token from sonar server->admin->security->users

8. QualityGate Status: "Ok" 
    - Jenkins->generate script->wait for quality gates
    - Sonar->need to generate webhook->configuration->create    

9. NEXUSIQ //For checking any vunerability present in the code or not. 
    - we need to provide the .war/.jar path. 
    Ex: steps {
         script {
            nexusIQ ('testproject', "/target/*.war .jar")
        }
    }

10. DEPLOY //Deploying generated artifact to Nexus Repo
    - mvn deploy
    - Few things needs to update under pom.xml file. 
     <distributionManagement>
     <repository>
       <id>internal.repo</id>  //should match with setting.xml within .m2 folder and also we need to define the nexus credentils.
       <url>Host to Company Repository</url> //
     </repository>
    - <snapshotRepository> //related to DEV env. 
    - Maven Deploy Plugin //used during the deploy phase. it needs to define under <plugin> pom.xml.
    - plugin 
      - nexus-artifact-uploader 
      - Nexus Platform (nexus-jenkins-plugin)

11. DOCKER LOGIN & BUILDING IMAGE
    - Dockerfile //need to write dockerfile and present in source code repo
    - plugins 
      - Docker (docker-plugin)
      - docker pipeline
      - docker-build-step, allows to add various docker cmds to the job as build steps
      - Cloudbees docker build and publish (docker-build-publish), building dockerfiles based projects. 
      - aqua security scanner 

12. TAGGING & PUSHING //tagging the image and pushing to dockerhub/image repo

13. Deploying to K8s by Helm Chart


