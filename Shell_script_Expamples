Imp Links:
1. https://www.geeksforgeeks.org/shell-script-to-perform-operations-on-a-file/

2.Complete Real-time Shell Scripting Tutorial in One video | Beginer to Advance Level:
https://www.youtube.com/watch?v=wFAAdla2JXs

3. https://www.youtube.com/watch?v=rMpa-VgJ_UQ Bash Shell Scripting Tutorial | Full Course (2023)

4. https://www.youtube.com/watch?v=e7BufAVwDiM&t=15s Bash Scripting Full Course 3 Hours

5. https://www.youtube.com/watch?v=TPRSJbtfK4M, Bash Script with Practical Examples | Full Course

6. https://www.youtube.com/watch?v=M6nZpfIIFEM&list=PL0tP8lerTbX3MeIyMxGW2sLhWnPdn_xhd


=================================================================================================================
Arithmatic Examples: [ +, -, /*, %, / ]
read a b
echo "addition: ` expr $a + $b `"
echo "Substraction: ` expr $a - $b `"
echo "Multiplication: ` expr $a \* $b `"
echo "Division: ` expr $a / $b `"
echo "Reminder: ` expr $a % $b `"

Relational Operators: 
-eq	Checks if the value of two operands are "equal" or not; if yes, then the condition becomes true.	
-ne	Checks if the value of two operands are equal or not; if values are "not equal", then the condition becomes true.	
-gt	Checks if the value of left operand is "greater than" the value of right operand; if yes, then the condition becomes true.
-ge	Checks if the value of left operand is "greater than or equal to" the value of right operand; if yes, then the condition becomes true.
-lt	Checks if the value of left operand is "less than" the value of right operand; if yes, then the condition becomes true.
-le	Checks if the value of left operand is "less than or equal to" the value of right operand; if yes, then the condition becomes true.

Logical Operators: Boolean 
!	This is logical negation. This inverts a true condition into false and vice versa.	
-o	This is logical OR. If one of the operands is true, then the condition becomes true.
-a	This is logical AND. If both the operands are true, then the condition becomes true otherwise false.

Statements:
1. simple if
 if [ condition ]; then
 echo "statement"
 fi

2. if else
 if [ condition ]; then
 echo "statement-1"
 else
 echo "statement-2"
 fi

3. if else if

4. nested if
 if [ condition ]; then
 echo "statement"
   if [ condition ]; then
   echo "statement-1"
   else
   echo "statement-2"
 else
 echo "statement"
 fi


-----------------: Scripts Examples: --------------------
Ex: commandsubstitution.
 current_directory=$(pwd)
 echo "present directory is: " $current_directory
 newfile=`cat>file.txt`
 echo $newfile

Ex: How to use the parameters.
 echo $0
 echo $1
 # name=$0
 # echo $@ --> show all the parameters. 
 # echo $# --> show how many parameters pass
 # echo "my name is : " $name -->store the parameters

 o/p: file.sh "ibraur ahemad" 31

Ex: Task-1 ,
 - Read the input from the user i.e. ip / domain name
 - using the ping cmd to ping the server
 
 read -p "which server you want to ping" server_ip
 ping c5 -w5 $server_ip

Ex: Task-2,
 - Remote M/C using bash script

 read -p "enter the username: " username
 read -p "enter the password: " IP
 ssh $username@$IP
or, # passing the parameters. 
 username=$1
 IP=$2
 ssh $username@$IP

Ex: Case statement,
 read -p "enter grade: " grade
 case $grade in
 A) echo "marks between 90-100"
 ;;
 B) echo "marks between 70-90"
 ;;
 c) echo "marks between 50-60"
 ;;
 *)
 echo "marks below 40"
 esac

--- Ex: Array, data structure for storing multiple values in a single variables. ---
 value=(Ahemad Ganesh Ram);
 echo ${value[1]}
 echo ${value[*]} # printing all array's

Ex: For Loop, Iteration, doing one thing again & again 
  [for loop, while loop, until loop]
--- Ex-1: for loop ---
 #  for ((initialization; condition; inc/dec)) {
 #  }
 for ((i=0; i<5; i++)){
  echo "hello"
 }
Ex-2,
 name=(hi hello todo surname primary secondary)
  for ((i=0; i<5; i++)) {
   echo ${name[i]} 
  }

--- Ex-1: while loop ---
 while [condition];
 do
  // code
 done
-----
 i=0
 while [ $i -le 4 ];
 do
 echo "Ibraur"
 ((i++))
 done

Ex: Until loop, It works until the condition is false. Reverse of while loop
 value=1
 until [ $value -ge 10 ];
 do
 echo "ibraur"
 ((value++))
 done

Ex:, BreakContinue
Its break the execution of a loop, 
Continue -> is skip the execution. 
for ((i=0; i<=10; i++)) {
    if [ $i -eq 5 ]
    then
    break 
    else
    echo $i
    fi
}
or,
value=1
while [ $value -le 10 ]; do
  echo "$value"
  if [ $value -eq 5 ]; then
  break
  fi
  ((value++))
done
-----
for ((i=0; i<=10; i++)) {
    read age
    if [ $age -lt 18 ]
    then
    echo "Go back"
    break
    else
    echo "part on"
    fi
}

Ex: Automating Dir / File Creation
read dir
for ((i=0; i<=10; i++)) {
 mkdir $dir$
}
---
read demo.txt
for((i=1;i<=4;i++)) {
  touch $demo.txt$i
}
--------------
Ex: User Creation
Refer to video

--------------
Ex: Test Command
Test cmd is basically used to test the condition. 
If condition is equal/true it'll return 0 or 1.

A="HELLO"
B="HELLO"
if test $A = $B
then
echo "equal"
else
echo "notequal"
fi

or,
s1="apple"
s2="apple"
 
if [ $s1 = $s2 ];
then
    echo "Strings are equal."
else
    echo "String are not equal."
fi

=================================================================================================================

Ex:1, To check file is present in a specific location or not,
 - Note:  If directory then use -d in place of -f

 #! /bin/bash
 file=/opt/demo.txt
 if [ -f "$file" ];then
 echo "file is present"
 else
 echo "file is not present"
 fi
-----------------------
Ex:3, Taking i/p and doing arithmatic operations.
 read a b
 echo "Addition: `expr $a + $b `"
 echo "Substraction: `expr $a - $b `"
 echo "Multiplication: `expr $a \* $b `"
 echo "Division: `expr $a / $b `"
 echo "Reminder: `expr $a % $b `"
or,
 read a b
 echo "Addition: " $((a+b))
----------------------
Ex: Taking i/p and Comparing among two Big number.
if [ $a -gt $b -a $b -lt $a ];
then
echo "$a is big"
else
echo "$b is big"
fi

Ex:4, Taking i/p and Comparing among three Big number.
 read a b c
 if [ $a -gt $b -a $b -gt $c ];then
 echo "a is big"
 elif [ $b -gt $c ];then
 echo "b is big"
 else
 echo "c is big"
 fi
----------------------
Ex:5, Printing 1-10.
 num=1
 while [ $num -le 10 ];do
 echo "$num"
 ((num++)) #increment by 1
 done

Ex:6, Printing 10 to 1.
 num=10
 while [ $num -ge 1 ];do
 echo "$num"
 ((num--)) #decrement by 1
 done

Ex: Pyramid 0-9
i=0
while [ $i -lt 10 ]
do 
  a=$i
  while [ $a -ge 0 ]
  do
  echo -n "$a"
  ((a--))
  done
echo
((i++))
done
-----------------------
Ex:7 Printing 10 to 1 in a single line by using for loop
 for (( counter=10; counter>0; counter-- ))
 do
 echo -n "$counter "
 done

or, 
for ((i=10; i>0; i--)) {
echo $i
}
--------------------
Ex:7, Multiplication 
read num
a=1
while [ $a -le 10 ]; do
c=`expr $num \* $a`
echo "$num * $a = $c"
((a++))
done
-------------------
Ex: Reverse a string using for loop.
s="IBRAUR"
strlen=${#s}
for (( i=$strlen-1; i>=0; i-- ));
do
    revstr=$revstr${s:$i:1}
done
echo "Reversed String : $revstr"

or,
read name
strlen=${#name}
for (( i=$strlen-1; i>=0; i-- ));
do
    revstr=$revstr${name:$i:1}
done
echo "Reversed String : $revstr"
------------------------
Comparing a sting:
A="HELLO"
B="HELLO"
if test $A = $B
then
echo "equal"
else
echo "notequal"
fi

or,
s1="apple"
s2="apple"
if [ $s1 = $s2 ];
then
    echo "Strings are equal."
else
    echo "String are not equal."
fi
---------------
Even or Odd:
read a 
if [ `expr $a % 2` == 0 ] ; then
echo "$a is even"
else
echo "$a is odd"
fi

===========================================================================================================
Ex: Get the report from AWS resource usage.
 #!/bin/bash

 ##############
 # Author: Ibraur
 # Date:
 ##############

 # aws s3
 # aws ec2
 # aws IAM users