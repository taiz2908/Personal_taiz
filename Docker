--------------------What is Docker? -------------------------------------
 - Docker is a tool for running application in an isolated environment. 
 - It's similar to virtual machine.
 - Standard for software deployment. 

--------------------Container vs Virtual Machine-----------------------------------
Containers:
 - Containers are an abstraction at the app layer that packages code & dependecies together. 
 - Multiple containers can run on the same machine & share the OS Kernel with other container. 

Ex:
----[Aap A] [Aap B]  [Aap C]
------Docker-----------
------Host OS----------
------Infra------------

Virtual Machine:
 - Virtual machines are an abstraction of physical hardware turning one server into many servers.
 - Each VM includes full copy of an OS system / Dedicated OS, necessary binaries & libraries- taking up ten's of GB's
 - Slow to boot. 

Ex:
 [-----VM1----] [VM2] [VM3]
 -----AAP1---
 [GUEST OS]     [GUEST os]
 -----Hypervisor--------------------------
 -----Infra-------------------------------

Benefits of Container:
- Run container in sec instead of minutes. 
- Less resource result less disk spaces. 
- Less Memory i.e. light weight 
- Doest need full OS. 
- High Performance 
- Deployment 
- Testing (Locally)

---------------------------- Docker Images & Contaioners -----------------------------------
Images:
 - Image is a template for creating an environment of our choice. 
 - It's a snapshot
 - Has everything to run an application. 
 - OS , software , app code etc 

Containers:
 - Running instance of an image. 
 - 
Note: We can't modify docker images, Can convert into container's and within container we can do the required changes, 

------------------------COMMAND'S-------------------------------------
Images:
 - docker images / docker image ls
 - docker run 
 - docker tag
 - docker pull
 - docker push
 - docker rmi <image_name>

Container's:
 - docker container ls 
 - docker ps ,to show running container 
 - docker ps --help
 - docker ps -a / docker ps -aq, to show running as well as stop container 
 - docker top 
 - docker start 
 - docker stop
 - docker rm
 - docker commit
 - docker attach
 - docker stats
 - docker inspect
 - docker logs

Ex: Pulling an image from hub.docker.com
# docker pull ubuntu
# docker pull tomcat:7.0
# docker pull tomcat:8.0
# docker images
# docker run -it ubuntu /bin/bash -> create the container as well as entered into the container. 


# docker run -itd ubuntu /bin/bash
# docker attach <containerID>

Delete Container:
docker stop <containerID>
docker stop $(docker ps -q) , stop multiple container
docker rm $(docker ps -aq) , delete all container
docker rmi $(docker images -q) , remove multiple images
docker rm <containerID> --force , forcefully delete a container. 

------------------------------ DOCKER PORT MAPPING ------------------------------------------------
Ex: Exposing Ports
 docker pull nginx
 docker run -d nginx:latest
 docker run -d -p 8080:80 nginx:latest

Ex: Exposing multiple ports.
 #docker run -d -p 8080:80 -p 9090:80 nginx:latest

---------------------------------NAMING A CONTAINER---------------------------------------------
 #docker run --name webserver -d -p 8080:80 nginx:latest

 #docker ps --format="ID\t{{.ID}}\nNAME\t{{.Names}}\nIMAGE\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

 #export FORMAT="ID\t{{.ID}}\nNAME\t{{.Names}}\nIMAGE\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

 #docker ps --format=$FORMAT

-------------------------------- DOCKER VOLUMES ------------------------
Allowing share of data, files & folders between hosts & containers, and between conatiners. 

1. Copy the data from local to nginx container: 
 #docker run --name website -v <desktop path>:/usr/share/nginx/html -d -p 8080:80 nginx:latest
 #docker exec -it website/containerID bash
 #ctrl+d : come outside of the container 

2. Volumes between containers:
  docker run --help: show all commands
  docker run --name website-copy --volumes-from website -d -p 8081:80 nginx

-------------------------------- DOCKERFILE ----------------------------
By using dockerfile we can create our own image 

 FROM: The base image to use in the build
 RUN: executes a command
 CMD:
 EXPOSE: opens a port 
 COPY: only perform copy i.e, copy a file from host 
 ADD: copy the files from the remote source i.e, from website
 ENV: gets an env variable 
 ENTRYPOINT: 
 WORKDIR:
 USER:

Ex: 1, Building docker file & create a image. 
 FROM nginx:latest
 ADD . /usr/share/nginx/html

 docker build -t website:latest .
 docker image ls 
 docker run --name website -p 8080:80 -d website:latest








