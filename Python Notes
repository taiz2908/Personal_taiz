print / input - function in python
() - Parenthesis
[] - square bracket
"" - Double quotes - represents 'String'
Ex: print("Hello World!")
-----------------------------------------------------------
Variables:
 Define memory location where data is being store
 Basic Types in Python -  
 1) Numbers(integers '22/1/43', floating'1.1/3.4,11.3'), 
 2) boolean('True/False'), 
 3) strings

Ex:
  name = "Taizun"
  age = 33 / age = "22"
  print(name, age)

Ex: Here defining two variable with first_name & last_name .
  first_name = "Tony"
  last_name = "shark"
  age = "52"
  Tony_Genius = True
  print(first_name + " " + last_name, age, Tony_Genius)

  + - concatenation

  Ex: Taking the i/p from users
   name = input("Enter your name?")
   print("Hello" + name)
-------------------------------------------------------------------
Type Conversion: 4 types (int, float, str, bool)
Ex:
 age = input("Pls provide your age")
 new_age = int(age) + 2
 print(new_age)
  
Ex: 
 sum = 2+11
 print(sum)

taking two number as input & add them. 
 first = input("Enter first number")
 second = input("Enter second number")
 sum = int(first) + int(second)
 print(sum)
or, 
 first = input("Enter first number")
 second = input("Enter second number")
 sum = int(first) + int(second)
 print("The sum is " + str(sum))
----------------------------------------------------
Strings:
Ex: convert lower case to upper case.
 name = "ibraur ahemad"
 print(name.upper())

Ex: Find a specific letter/count/index position.
 a = "ibraur ahemad"
 print(a.find('r'))

Ex: replace my name to hello.
 a = "ibraur ahemad"
 print(a.replace("ibraur ahemad", "hello"))
---------------------------------------------------
Keywords: to find character or sub string within the main string , 
using "in" function: True / False, boolean
Ex:
 a = "ibraur"
 print("i" in a)
---------------------------------------------------
Arithmetic Operators: 
+ , -, *, / , % (REMAINDER/MODULER), //, **
Ex:
 a = 10
 a += 2
 a -= 2
 a *= 2
 print(a)
operator Precedence: 
Ex:
 result = 2 + 3 * 5
 print(result) 
or,
 result = (2 + 4) * 5
 print(result)
--------------------------------------------------------
Comments:
# this is my first code
---------------------------------------------------------
Comparision Operators:
< , >, <= ,>= , ==, != ,
Logical Operators: Three types
Or : if we have two conditions , we can use or operator.
and : if two conditions are true then print true only or else false. 
not: makes true to false & false to true. 
-------------------------------------------------------
If : Simple If statement
Ex:
 a = 11
 if a <= 12:
     print("value is true")
---------------------
If else: if else _Statement
Ex: a = 13
 if a <= 12:
     print("value is true")
 else:
     print("Value is False")
----------------------
nested ifelse:
Ex: 
age = 40
if age >= 60:
    print("senior citizen")
elif age < 60 and age > 20:
    print("Adult")
else:
    print("Teenager")
------------------------------
Ex:
first = input("enter first number: ")
operator = input("Enter operator(+,-,%,*): ")
second = input("Enter second number: ")
first = int(first)
second = int(second)
if operator == "+":
    print(first + second)
elif operator == "-":
    print(first - second)
elif operator == '%':
    print(first % second)
elif operator == '*':
    print(first * second)
else:
    print("Invalid ")
-----------------------------------
Range: range(5) # 0, 1, 2, 3, 4
in python -1 indexing means starting the counting from the right side.
Ex:
number = range(5)
print(number)
 --------------------------------------------------------------
 Ex: print 1- 10
 While Loop:
 a = 1
while a <= 10:
    print(a)
    a = a + 1
Ex:
a = 1
while a<= 10
     print(a * "*")
     a +=1
-----------------------
Ex: print multiplication. 
a = int(input("Enter the Number"))
b = 1
while b <= 10:
    print(a, '*', b, '=', a * b)
    b += 1
--------------------
For Loop: Itirate the list structure .
Ex:
for i in range(5):
    print(i)
------------------------
List: Collection of data types. 
Ex:
value = [45, 67, 22, "hello"]
print(value[2])
