from ast import keyword
from dis import Instruction
from errno import ENOTCONN
from sys import modules
from xml.sax.xmlreader import InputSource


1. WEB DEVELOPMENT
2. DATA SCIENCE
3. MACHINE LEARNING
4. AI 
5. AUTOMATION

Advantages:
 easy to learn & setup
 simple Syntax
 many libraries
 large community 

 Web Development: 
  Popular librarires : django , more light weight flask 


print / input - function in python
() - Parenthesis
[] - square bracket
"" - Double quotes - represents 'String'
Ex: print("Hello World!")

---------------- :PYTHON COURSE TOPICS: ------------------------
1. Work with strings, boolean, number
2. list, sets, DICTIONARY
3. variables & Functions
4. accepting user Input
5. input validation with conditional (if/else)
6. error handling try/except
7. looping for /while loop

Modules:
1. Write own modules
2. use build in python modules

Project-1 : Countdown app 
 - work with date time module 
 - package , pyPI & pip 

Project- 2 : Automation with Python 

OOP :
 Classes and Objects 

Project- 3:  API Request to GitLab 
 - HTTP REQUEST & HTTP RESPONSE 

---------------------- VARIABLES ----------------------------------------------
Variables:
 Define memory location where data is being store
 Variables are the containers for storing the value. 

 Basic Types in Python -  
 1) Numbers(integers '22/1/43', floating'1.1/3.4,11.3'), 
 2) boolean('True/False'), 
 3) strings

Ex:
  name = "Taizun"
  age = 33 / age = "22"
  print(name, age)

Ex: Here defining two variable with first_name & last_name .
  first_name = "Tony"
  last_name = "shark"
  age = "52"
  Tony_Genius = True
  print(first_name + " " + last_name, age, Tony_Genius)

  + - concatenation

  Ex: Taking the i/p from users
   name = input("Enter your name?")
   print("Hello" + name)
or,
  Ex:
  print(f"I'm {33} years old") , f stands for formatting
  print(f" 20 days are{20 * 80 * 66} days")
or,
 mins_sec = 20 * 30 * 60
 seconds_mins = "seconds"
 print(f"I'm {33} {mins_sec}")
 print(f" 20 days are {seconds_mins}")

 ---------------------------- FUNCTIONS -----------------------------------------
FUNCTIONS: To avoid repeating the same logic. 
1. In-Build function
2. User-Defined function
3. Module Function

1.In-Build Functions:
 - Ex: int(), str(), bool(), etc
 - parameters are also called arguments. 
 - Informations can be passed into functions as parameters.  

2.User-Defined function:
 - def : definition , A function is defined using the def keyword. 
 - Block of code which only runs when it is called. 
 - Caliing a function = to execute the function.

 def function_name (parameters);

Ex: 
def sum(first, second):
    print(first + second)
sum(2, 9)

Ex:2
calculations_to_units = 20
name_of_units = "hours"

def days_to_units():
    print(f"20 days are {calculations_to_units} {name_of_units}")
    print("All Good!")
    
days_to_units()

Ex: 3, Parameters: Passing the input parameter
- defining the parameters within the bracket

calculations_to_units = 20
name_of_units = "hours"

def days_to_units(num_of_days):
    print(f"{num_of_days} days are { num_of_days * calculations_to_units} {name_of_units}")
    print("All Good!")

days_to_units(20)
days_to_units(30)
days_to_units(40)

Ex: 4 , Passing two input parameters. 
calculations_to_units = 20
name_of_units = "hours"

def days_to_units(num_of_days, custome_message):
    print(f"{num_of_days} days are { num_of_days * calculations_to_units} {name_of_units}")
    print(custome_message)

days_to_units(20, "Hello Good day!")
days_to_units(30, "Awesome!")

3.Module Function:
 Ex: math module.

 import math
 print(dir(math))

Ex:
 from math import sqrt
 print(sqrt(16))
 o/p: 4.0
or, 
 from math import *
 print(sqrt(16))

-------------------------------------------------------------------
Type Conversion: 4 types (int, float, str, bool)
Ex: 
 age = input("Pls provide your age")
 new_age = int(age) + 2
 print(new_age)
  
Ex: 
 sum = 2+11
 print(sum)

taking two number as input & add them. 
 first = input("Enter first number")
 second = input("Enter second number")
 sum = int(first) + int(second)
 print(sum)
or, 
 first = input("Enter first number")
 second = input("Enter second number")
 sum = int(first) + int(second)
 print("The sum is " + str(sum))
----------------------------------------------------
Strings:
Ex: convert lower case to upper case.
 name = "ibraur ahemad"
 print(name.upper())

Ex: Find a specific letter/count/index position.
 a = "ibraur ahemad"
 print(a.find('r'))

Ex: replace my name to hello.
 a = "ibraur ahemad"
 print(a.replace("ibraur ahemad", "hello"))
---------------------------------------------------
Keywords: to find character or sub string within the main string , 
using "in" function: True / False, boolean
Ex:
 a = "ibraur"
 print("i" in a)
---------------------------------------------------
Arithmetic Operators: 
+ , -, *, / , % (REMAINDER/MODULER), //, **
Ex:
 a = 10
 a += 2
 a -= 2
 a *= 2
 print(a)
operator Precedence: 
Ex:
 result = 2 + 3 * 5
 print(result) 
or,
 result = (2 + 4) * 5
 print(result)
--------------------------------------------------------
Comments:
# this is my first code
---------------------------------------------------------------------------------------------------
Comparision Operators: or, Conditionals (< , >, <= ,>= , ==, != )
 - Equals: a = b
 - Not equal: a != b
 - Less than: a < b
 - Greater than: a > b
 - Less than eual to: a<= b
 - Greater than equal to: a >= b

Logical Operators: Three types
 1. Or : if we have two conditions , we can use or operator.
 2. and : if two conditions are true then print true only or else false. 
 3. not: makes true to false & false to true. 
--------------If statement--------
Ex:
 a = 11
 if a <= 12:
     print("value is true")
I--------------if-else------------
Ex: a = 13
 if a <= 12:
     print("value is true")
 else:
     print("Value is False")

Ex:
first_num = int(input("Enter first_num: "))
second_num = int(input("Enter second Num: "))

if first_num >= second_num:
    print(first_num)
else:
    print(second_num)
----------------nested if-else-----
Ex: 
age = 40
if age >= 60:
    print("senior citizen")
elif age < 60 and age > 20:
    print("Adult")
else:
    print("Teenager")
------------------------------
Ex:
first = input("enter first number: ")
operator = input("Enter operator(+,-,%,*): ")
second = input("Enter second number: ")
first = int(first)
second = int(second)
if operator == "+":
    print(first + second)
elif operator == "-":
    print(first - second)
elif operator == '%':
    print(first % second)
elif operator == '*':
    print(first * second)
else:
    print("Invalid ")
--------------------------------------------------------------------------------------------------
Range: range(5) # 0, 1, 2, 3, 4
in python -1 indexing means starting the counting from the right side.
Ex:
number = range(5)
print(number)
 --------------------------------------------------------------
 Ex: print 1- 10
 While Loop:
 a = 1
while a <= 10:
    print(a)
    a = a + 1
Ex:
a = 1
while a<= 10
     print(a * "*")
     a +=1
-----------------------
Ex: print multiplication. 
a = int(input("Enter the Number"))
b = 1
while b <= 10:
    print(a, '*', b, '=', a * b)
    b += 1
--------------------
For Loop in Lists: Itirate the list structure .
Ex:
for i in range(5):
    print(i)

Ex: 
marks = [11, 23, 44]
for score in marks:
    print(score)
------------------------
List: Collection of data types. 
Define by []

Ex: 0/p: [67]
value = [45, 67, 22, "hello"]
print(value[2])

Ex:o/p: 2,3,4,5,6,7 , means 2-7
a = [0,1,2,3,4,5,6,7,8,9]
print(a[2:8])

Ex: [25, 33, 54, 65, 56, 47]
a = [10,51,25,33,54,65,56,47,38,19]
print(a[2:8])

Ex: o/p: [4,5,6,7,8,9]
a = [0,1,2,3,4,5,6,7,8,9]
print(a[4::])

Ex: o/p: [9,6,3,0]
a = [0,1,2,3,4,5,6,7,8,9]
print(a[::-3])
----------------------------------
How to add in last? by using append()
Ex:
marks = [11, 23, 44]
marks.append(99)
print(marks)
O/p: [11, 23, 44, 99]

How to add in Between?
Ex: 0 means starting
1 means after 11
marks = [11, 23, 44]
marks.insert(1, 99)
print(marks)
O/P: [11, 99, 23, 44]

Ex: We can use in function in the list:
marks = [11, 23, 44]
marks.insert(0, 90)
print(10 in marks)
o/p: False

Ex: 3
marks = [11, 23, 44]
print(len(marks))

Ex:4, print the values by using while loop 
marks = [10, 33, 44, 56, 77]
i = 0
while i < len(marks):
    print(marks [i]) ---> marks of i 
    i += 1
o/p: 10 33 44 56 77

Ex:5,
marks = [10, 33, 44, 56, 77]
i = 0
while i < len(marks):
    print(marks [i])
    i += 1
marks.clear()
print(marks)
----------------------------------------------------------------------
BREAK & CONTINUE: Also Present in C++ & java

Ex:
students = ["taiz", "bulbul", "babli", "bablu"]
for student in students:
    if student == "babli":
        break;
    print(student)
O/p: taiz, bulbul

Ex:
students = ["taiz", "bulbul", "babli", "bablu"]
for student in students:
    if student == "babli":
        Continue;
    print(student)
O/p: taiz, bulbul, bablu

-----------------------------------------------------------------------
TUPLE : IMMUTABLE , Means we cant't change. 
Kind if list , like clear, append, insert but here we cant't.
Here we use parenthensis, ()
We can use opearations: count , index

Ex:
marks = (90, 55, 60,55, 61)
print(marks.count(55))

-----------------------------------------------------------------------
SET:
Unique value stores within the sets.
There is no index in sets. i.e. unordered. 
Use by {}

Ex: 
marks = {90, 55, 60, 55, 61}
print(marks)
O/p: 90, 60, 55, 61

-------------------------------------------------------------------
DICTIONARY:
We store the key value pairs. 

Ex:
marks = {"english": 98, "math": 88, "physics": 88}
print(marks["math"]) ----> print only math marks.
marks["bio"] = 88;  ------> Insert bio & marks
print(marks)


---------------------------------Techwith NANA -----------------------------------------------------
Reverssed Key words in Python?
- Nothing but keywords with predefined meaning & syntax in the languag.
- Used to develop programming Instruction. 
Ex: 
and , as , break, class, continue, def, del,if, elif, else,in , is, with, while except, finally, false, for. 