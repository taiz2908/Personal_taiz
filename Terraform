INTRODUCTION
 - IAC - Infrasstructure as a code.
 - Cloudformation(2011): Automated infrastructure in AWS.
    Mitchell Hashimoto - 2014
 - Open source and supports all clouds .
 - Written in Go Language.
 - Uses HCL (Hasicorp configure Language), similar to JSON.
 - Two ways to approach.
   1. Imperative
   2. Declarative
 - Reuse the code. 
 - File extension with .tf (terraformfile)
 --------------------------
 Installation:
  On windows:
   - paste .exe file in programsfiles folder
   - go to env variable set the path-->click on path-->new ->paste the actual path-->ok
   - open cmd and type terraform version ?
---------------------------
 Block & Arguments:
  - resource: Block name-->1st
  - local_file: <provider>_<resource_type>: Resource type-->2nd
  - pets: <resource_name> -->3rd
  - {}: Arguments -->4th
Example:
 resource "local_file" "pet" {
    filename = "/root/pets.txt"
    content = "I love dogs!"
 }
Note:
 - We can create multiple resource in one file. 

Ex:
 resource "random_string" "rand-str" {
    lenght = 12
    special = true
    override_special = "{}/*&[]"
 }
 output "rand-str" {
    value = random_string.rand_str[*].result
 }
 ---------------------------
Providers:
 - <provider>_<resource_type>: Resource type-->2nd
 - automatically created the file and before we need to run terrafrom init.

Terraform cmds:
 # terraform init
 # terraform validate
 # terraform plan
 # terraform apply

Terraform Init:
 - initializing the backend.../ initializing providers plugins...
 - Reusing previous version
 - Finding latest version of hasicorp
 - installing hasicorp local
 - Terraform has been successfully initialized

Terraform validate
 - Shows the message: Success! The configuration is valid. 

Terraform Plan:
 - it will perform the following actions

Terrafrom apply:
 - it will ask for these actions Yes or No
-----------------------------
What is .tfstate ?
 - Whatever it'll create it's lock those things.

==================Terraform with Docker:==========================================================
 - Terraform Block: Install required providers, versions etc
 - source
 - version
 Ex:
 terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "2.23.0"
    }
  }
}
provider "docker" {}

# Pulls the image
resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = false
}

# Create a container
resource "docker_container" "nginx" {
  image = docker_image.nginx.latest
  name  = "nginx-tf"
  ports {
    internal = 80
    external = 80
  }
}
==================Terraform Vriables==========================================================
Where to use?



