Ref: 
 1. - https://www.youtube.com/watch?v=7xngnjfIlK4&t=1716s
    - https://github.com/sidpalas/devops-directive-terraform-course

 2. https://www.youtube.com/watch?v=iRaai1IBlB0&t=8s

 3. https://www.youtube.com/watch?v=SLB_c_ayRMo&t=51s Terraform Course - Automate your AWS cloud infrastructure

 4. https://www.youtube.com/watch?v=iRaai1IBlB0&t=6s Learn Terraform (and AWS) by Building a Dev Environment â€“ Full Course for Beginners

============================: INTRODUCTION :=================================================================
 - IAC - Infrasstructure as a code. (create,manage,delete by using the code)
 - Cloudformation(2011): Automated infrastructure in AWS.
    Mitchell Hashimoto - 2014
 - Open source and supports all clouds .
 - Written in Go Language.
 - Uses HCL (Hasicorp configure Language), similar to JSON.
 - Two ways to approach.
   1. Imperative
   2. Declarative
 - Reuse the code. 
 - File extension with .tf (terraformfile)

Others IAC / Alternative : Pulumi, CloudFormation by AWS. 

 --------------------------
 Installation:
  On windows:
   - paste .exe file in programsfiles folder
   - go to env variable set the path-->click on path-->new ->paste the actual path-->ok
   - open cmd and type terraform version ?
---------------------------
 Block & Arguments:
  - resource: Block name-->1st
  - local_file: <provider>_<resource_type>: Resource type-->2nd
  - pets: <resource_name> -->3rd
  - {}: Arguments -->4th
Example:
 resource "local_file" "pet" {
    filename = "/root/pets.txt"
    content = "I love dogs!"
 }
Note:
 - We can create multiple resource in one file. 

Ex:
 resource "random_string" "rand-str" {
    lenght = 12
    special = true
    override_special = "{}/*&[]"
 }
 output "rand-str" {
    value = random_string.rand_str[*].result
 }
-----------------------------------------------------
Providers:
 - Responsible for understanding the API interaction.
 - <provider>_<resource_type>: Resource type-->2nd
 - automatically created the file and before we need to run terrafrom init.
 - downloaded the plugins for providers.
AWS : aws
Azure: azurerm
Google: google
Alibaba cloud: alicloud

Terraform cmds:
 # terraform init
 # terraform validate
 # terraform plan
 # terraform apply --auto-approve
 # terraform destroy
Other Cmds:
 # terraform fmt: The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style
 # terraform state list , lists all resources
 # terraform state show <resource_name> , gives a detailed output
 # terraform output
 # terraform refresh, refresh all of the states without applying any changes and prints the outputs.

Target Resources: using of "-target" flag
 # terraform apply -target <resource_type>.<resource_name>  , creating specific one resource
 # terraform destroy -target <resource_type>.<resource_name> , destroying specific one resource. 

1. Terraform Init:
The terraform init command creates a working directory(.terraform) in which Terraform configuration files can be found. 
 - Initializing the backend.../ initializing providers plugins...
 - Installing required plugins.
 - Reusing previous version
 - Finding latest version of hasicorp
 - Installing hasicorp local
 - Terraform has been successfully initialized

2. Terraform validate
 - Mostly use to validate the syntax i.e.,missing trailing codes, or equal signs, some modules declar's multiple times etc. 
 - Shows the message: Success! The configuration is valid. 

3. Terraform Plan: "dry run"
 - compaired desired state with actual state.
 - it will perform the following actions.
 - it'll display show after apply 

4. Terrafrom apply:
 - it will ask for these actions Yes or No

===================================: .tfstate  :====================================================
Ref: 
 - https://www.youtube.com/watch?v=5FkcC_w3xQM&t=39s
 - https://www.youtube.com/watch?v=q5-zsBY90j8

What is .tfstate ?
 - Whatever it'll create it's lock those things.(stores all of those resources we have created)
 - JSON file: contains informations about every resource and data object. 
 - Contains sensitive info- database password etc
 - can be stored locally or remotely (S3, Google cloud storage etc)

How to Store Terraform State File In AWS S3?
 - Store in S3 Bucket.In the main.tf we need to write backend "s3" {}
 - Need to create S3 Bucket. 
 - Create a policy & role in aws IAM.
 - Create Dynamodb & need to create a dynamodb table
 - Go inside main.tf / backend.tf .
Ex:
   terraform {
    backend "s3" {
    encryption = "true"
    bucket = "mycmpy-tf-state"
    region = "us-east-1"
    key = "terraform-state/anyname.tfstate"
    dynamo_table = "terraform-lock"
    role_arm = "arn:aws:iam:{}-role/terraform-state-s3"
      }
    }

===================: Terraform with Docker: ==========================================================
 - Terraform Block: Install required providers, versions etc
 - source
 - version
 Ex:
terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "3.0.1"
    }
  }
}
provider "docker" {
  host = "unix:///var/run/docker.sock"
}

# Pulls the image
resource "docker_image" "nginx" {
  name         = "nginx:latest"
  keep_locally = false
}

# Create a container
resource "docker_container" "nginx" {
  image = docker_image.nginx.latest
  name  = "nginx-tf"
  ports {
    internal = 80
    external = 80
  }
}
================== :Terraform AWS: ==========================================================
# creating the EC2 Services.
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}
# providing the resgion, access_key & secrete_access key. 
provider "aws" {
  region     = "us-west-2"
  access_key = "my-access-key"
  secret_key = "my-secret-key"
}

# Need to provide ami, instance type & instance id.
resource "aws_instance" "web1" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"
  tags = {
    Name = "server1"
  }
}

resource "aws_instance" "web2" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = "t3.micro"
  tags = {
    Name = "server2"
  }
}
# Can able to see public IP
output "ec2_public_ips" {
  Value = aws_instance.web1.public_ip 
}
# Creating a S3 Bucket
resource "aws_s3_bucket" "bucket" {
  bucket = "my-tf-test-bucket"
  tags = {
    Name        = "my-tf-test-bucket"
    Environment = "Dev"
  }
}

# Creating AWS VPC Using Terraform:
 - VPC
 - Subnet
 - Internet Gateway
 - Route Table 
 - Subnet Associations
 - Security Groups
 - EC2 Instance
Ex: https://github.com/taiz2908/DevOps_Projects/tree/main/terraform
 # route table/vpc/security groups/ resource for terraform
Ex: 
 - https://www.youtube.com/watch?v=SLB_c_ayRMo&t=51s
 - https://github.com/Sanjeev-Thiyagarajan/Terraform-Crash-Course

========================: Terraform Variables & Outputs: ===================================================

Ref: https://developer.hashicorp.com/terraform/language/values/variables

Variable Types:
1. Input variables:
 - Ex: string, num, bool etc. 
 - Here we have to define two fies. 
   - main.tf
   - variable.tf

Ex: 
- main.tf , file
resource "aws_instance" "web1" {
  ami           = var.ami_type
  instance_type = var.instance_type
  tags = {
    Name = "server1"
  }
}

- variable.tf, file
Ex:
  variable "ami_type" {
  description = "ec2 instance type"
  type        = string
  # default     = "data.aws_ami.ubuntu.id"
}
  variable "instance_type" {
  description = "ec2 instance type"
  type        = string
  # default     = "t2.micro"
}


2. Local Variables: Temporary variables.can reuse,  Take a value repeatadely 
   - local.<name>

3. Output Variables:
   - Allows you to output some value mostly use for knowing the public ip. 
Ex:
 output "" {
  value = 
 }

Setting Input variables:
 - manual entry during apply/plan
 - default value in declaration block
 - TF_VAR_<NAME> Env variables
 - terraform.tfvars files  --> we can define the values for the variable, non-sensitive. 
 - *.auto.tfvars file
 - command line -var or -var-file

Ex: 
main.tf --> 
   - define our backend & providers
   - we can define local variables. 
   - we can define variables i.e., var.ami , var.instance_name etc
  
variables.tf --> 
   - vars mentioned under variables.tf file & can change during run time

terraform.tfvars --> 
   - Assigned a value.
   - default name with the name "terraform.tfvars"
   - we can define the values for the variable, non-sensitive. 

another-variable-file.tfvars -->
   - explicitly tell when we do terraform apply
   - terraform apply -var-file= 

===========================: Additional Language Features :=======================================================
Meta- Arguments:
1. depends_on:
    - Terraform automatically generats dependency graph based on reference. 
    - Ex:
     If we want to create the resource aws_iam_role_policy before aws_instance, hen we should define depends_on under aws_instace
    so that aws_instance would fail if attending to create it before the aws_iam_role_policy.

2. count:
    - if want to create multiple resources/copies then we can use count under resource. 
    - useful if we have multiple resources nearly identical. 

3. for_each:
    - kind of count arg but much more control of it to customise.
    - use to create multiple resource.

4. Lifecycle: Lifecycle meta-arguments control how Terraform treats particular resources.
    - create_before_destroy = true: indicates that if the resource does need to be destroyed, 
    Terraform should first provision its replacement before destroying the deprecated resource. 
    This can be useful for things such as zero downtime deployments.
    - ignore_changes: Sometimes an entity outside of terraform will automatically modify a resource (e.g. adding metadata, etc...). 
    The ignore_changes argument allows you to ignore specific types of resource changes to prevent this from causing Terraform to attempt to revert those changes.
    - prevent_destroy: provides an additional stopgap against accidentally destroying resources with terraform. 
    If set to true, Terraform will reject any attempt to destroy that resource.
-------------------------------
Provisioners:
 - Perform action on local / remote m/c's.
 - file, local-exec, remote-exec, vendor(chef,puppet,ansible)

===========================: Project Org + Modules :============================================================
Ref: https://www.youtube.com/watch?v=W92fsWzVRsg

Modules:
 - Module are containers for multiple resources that are used together. 
 - Collection of .tf and /or .tf.json files kept together in a directory.
 - Modules are the main way to package and resuse resource configuration with Terraform.
 
Types:
 1. Root Module:
    - default module containing all .tf files in main working dir.
 2. Child Module: 
    - A separate external module referred to from a .tf file.

Module Sources:
 - local path, terraform registry, github, bitbuckeet, s3, gcs bucket etc

===========================: Managing Multiple Env :============================================================
Dev / SIT/ PROD ETC
1. File Structure
2. Workspace

Terragrunt:
 - tool by gruntwork.io --> meta tooling can be apply on the top of that terraform 
 - make easier and keeping configuration dry.
 - less complexcity. 


=======================================: INTERVIEW QUS :===========================================================
Interview Qus:
 1. https://k21academy.com/terraform-iac/terraform-interview-questions/
 2. https://www.youtube.com/watch?v=t9bHZMFxQYY&t=110s

1. How to change's the configuration of already created resources by terraform?
 - # terraform import 
 - # terraform import [options] ADDRESS ID
 - https://developer.hashicorp.com/terraform/cli/commands/import

2. When the terraform runs , terraform.tfstate file created ?
 - Whatever it'll create it's lock those things. (stores all of those resources we have created)
 - JSON file: contains informations about every resource and data object. 
 - Contains sensitive info- database password etc
 - can be stored locally or remotely (S3, Google cloud storage,Azure storage a/c etc)
 
3. Some how if you loose the terraform.tfstate file then ?
 - terraform import
 - Unable to find the .tfstate file.
 - If we try to recreate it,Cost will increase & duplication will be done
 - it's create from initial so to avoide this we can use the command terraform import.

4. Features of Terraform?
 - Can use / manage in multiple cloud's.
 - Can use HCL easy to understand i.e., human reable 
 - 

5. Pulumi:
 - can use any language like python, typescript 
 - more flexible 

6. Modules in Terraform ?
 - Refer to Note.

7. Remote Back end in Terraform ?
 - A backend defines where Terraform stores its state data files.
 - Makes easier to the team to work together and all the members have the access to the latest state data
 - work as storage , and users can share the same infrastructure resrouces. 
 - Two types of Backend (Local & Remote)

8. How do we provide variable value in run time ?
 -  If we commented out "default" value in variable.tf file.

 variable "ami_type" {
  description = "ec2 instance type"
  type        = string
  # default     = "data.aws_ami.ubuntu.id"
}

9. Multiple Env , is there any way to manage ?
 - Terraform workspace: Allows to manage separate state file for each workspace
 - Reusable Module: This is an Architecture where configuration files are stored in a single directory with module
 block can source that directory into and pass to that variable.

10. Terraform latest Versions:
 - terraform_1.5.0-alpha20230405
 - terraform_1.4.4
 - terraform_1.4.3

=======================================================================================================
Ref: https://www.youtube.com/watch?v=pCoCynze4Ag

1. Daily activities that you do in Terraform?
 - Changes
 - Any New applications, resources based on that 
 - Any team facing some issue's.

2. What are services that you have worked with and wrote terraform files?
3. Tell me a scenario where you come across provisioners?

4. What are plugins and providers in terraform?
 - Based on the provider's plugins going to download.

5. How do you deploy the terraform code manually or with some automation? Have configured locks on the backend statefile?
 -  

6. When you want to deploy the same terraform code on different env then what is the best strategy?
7. How do you standardize terraform code so that can be shared across multiple teams in an organization?
8. How do you call output of one module in another module?
9. Lets say you have created lot of resources using terraform out of is there way to delete one the resource through 
Terraform?
10. Can we merge 2 different state files?
11. Few challenges that you came across while working with Terraform?
12. Best way to authenticate cloud providers through Terraform?
13. Lets assume 2 resources you are creating using terraform, but we need make sure once 1st resource created 
successfully then only need to start creating 2nd resource. Is this possible?
14. What is null resource in terraform?

15. What happens if statefile is missed or delete?
16. Can terraform used for automating on prem infra?
17. What if we encounter a serious error and want to rollback?

18. How to call existing resources from AWS or Azure to terraform without hardcoding the values or terraform import?
19. If we give count zero in resources level what will happen?
20. What is Dynamic Block in terraform?
21. Best Practices in Terraform?

===============================================================
Ref: https://www.youtube.com/watch?v=7lIlR0hXCY8
1. Can we use Terraform in on-prem infra?
 - Yes, We need providers .

2. Does Terraform supporys Multi-provider deployment?
 - Yes, 

3. All versions supported Terraform?
 - Github
 - Gitlab
 - Bitbucket
 - Github Enterprime edition

4. Components of Terraform Architecture?
 - Providers
 - Resource --> Mandatory component
 - Variables.tf
 - terraform.tfstate
 - output.tf 
 - 

5. How to store sensitive data in Terraform ?
 - 

6. State file locking ?
 - Why ? apply --> multiple user's , to protect the duplication 

7. 
 